#!/usr/bin/python3
# encoding: utf-8

import feedparser
import time
import sys
import os

os.chdir(os.path.dirname(os.path.realpath(__file__)))

timelimit = 24    # number of hours before posts expire
cachepath = "cache.txt"
feedspath = "feeds.txt"
versionsOnly = False    # debug tool to show only names and rss/atom versions of feeds

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

if time.strftime("%w") == "1":  # "monday mode" - since by the logic of this tools you haven't checked your feeds in 72 hours on monday mornings
#        print("DEBUG montag fick ja")
        timelimit = 72

if not os.path.isfile(feedspath):
        print("The specified feeds file could not be found. Falling back to the example file...")
        feedspath = "feeds.txt.example"

with open(feedspath, "r") as feedsfile:
        feeds = feedsfile.readlines()

def formatOutput(article):
    output = color.BOLD + str(article['index']).ljust(5) + color.END + article['published'] + "\n     " + article['medium'] + "\n     " + article['title'] + "\n     " 
    if not article['description'].startswith("<"):         # don't print html descriptions
            output = output + article['description'] + "\n"
    print(output)

def handleArguments():
        if len(sys.argv) == 2:
                if sys.argv[1] == "-h" or sys.argv[1] == "--help":
                        printHelp()
                        exit()


        with open(cachepath, "r") as cachefile:
            lines = cachefile.readlines()
            for arg in range(1, len(sys.argv)):
                if not sys.argv[arg].isdigit():
                    print(sys.argv[arg] + " is not a number!")
                else:
                    print("Opening article " + sys.argv[arg] + "...")
                    os.system("xdg-open " + lines[int(sys.argv[arg])])
        exit()

def printHelp():
        print("You are using rrr.")
        print("Use no arguments to update your feeds")
        print("Use the numbers next to the articles as arguments to open them in your favourite browser")
        print("Put your feeds (line by line, only the URL) into your feeds file")
        print("More features (maybe) to come.")

def updateRss10(d):
        print("DEBUG This is an rss10 feed!")
        global index, cachestring

        for e in d.entries:
            published_time = time.mktime(e.updated_parsed)
            if int(time.time() - published_time) < int(timelimit * 60 * 60):
                article = {'index': index, 'published': e.updated, 'title': e.title, 'description': e.description, 'medium': d['feed']['title']}
                formatOutput(article)
                cachestring = cachestring + e.link + "\n"
                index += 1

def updateRss20(d):
        print("DEBUG This is an rss20 feed!")
        global index, cachestring
        
        for e in d.entries:
            published_time = time.mktime(e.published_parsed)
            if int(time.time() - published_time) < int(timelimit * 60 * 60):
                article = {'index': index, 'published': e.published, 'title': e.title, 'description': e.description, 'medium': d['feed']['title']}
                formatOutput(article)
                cachestring = cachestring + e.link + "\n"
                index += 1

def updateAtom10(d):
        print("DEBUG This is an atom10 feed!")
        global index, cachestring

        for e in d.entries:
            published_time = time.mktime(e.updated_parsed)
            if int(time.time() - published_time) < int(timelimit * 60 * 60):
                article = {'index': index, 'published': e.updated, 'title': e.title, 'description': e.description, 'medium': d['feed']['title']}
                formatOutput(article)
                cachestring = cachestring + e.link + "\n"
                index += 1

def updateFeeds():
        global index, cachestring

        try:
                os.remove(cachepath)
                print("DEBUG Cache file deleted")
        except:
                print("DEBUG No cache file found")

        for f in feeds:
            d = feedparser.parse(f)
            if not versionsOnly:        # see versionsOnly above. if condition can be removed once all rss and atom versions work
                print(color.BOLD + d['feed']['title'] + color.END)
                
                if d.version == "rss20":
                        updateRss20(d)
                elif d.version == "rss10":
                        updateRss10(d) 
                elif d.version == "atom10":
                        updateAtom10(d) 
                else:
                        print("This feed is in '" + d.version + "' format. This is not supported yet.\n")
                

            else:
                print(color.BOLD + d['feed']['title'] + color.END + d.version)

        with open(cachepath, "w") as cachefile:
                cachefile.write(cachestring)

# main

# cache file should be deleted upon each update

index = 0
cachestring = ""

# check if arguments are present. if not, do the usual feed update thing
if len(sys.argv) > 1:
        handleArguments()
        exit()
else:
        updateFeeds()
        exit()
